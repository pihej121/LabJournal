knitr::opts_chunk$set(message=FALSE,warning=FALSE, cache=TRUE)
```{r}
Sys.time()
a<- Sys.time()
samples <- rnorm(100, mean=0, sd=1)
hist(samples)
b<- Sys.time()
b-a
samples <- rnorm(100, mean=0, sd=1)
hist(samples)
write.csv(hist(samples))
samples <- rnorm(100, mean=0, sd=1)
hist(samples)
write.csv(samples)
read.csv(samples)
samples <- rnorm(100, mean=0, sd=1)
hist(samples)
write.csv(samples)
read.csv(samples)
scan(samples)
scan(file= 'samples')
samples <- rnorm(100, mean=0, sd=1)
hist(samples)
write.csv(samples)
a <- matrix(0, ncol=20,nrow=20)
a<- runif(100)
a<- runif(100)
a <- matrix(0, ncol=20,nrow=20)
a<- runif(100)
a <- matrix(0, ncol=20,nrow=20)
a <- matrix(100, ncol=20,nrow=20)
a <- matrix(runif(100), ncol=20,nrow=20)
View(a)
write.csv(a)
for (i in 1:100){
if(i%%3 == 0 & i%%5 == 0) {
print('FizzBuzz')
}
else if(i%%3 == 0) {
print('Fizz')
}
else if (i%%5 == 0){
print('Buzz')
}
else {
print(i)
}
}
table(unlist(strsplit(a,split="")))
a<-"some text that has some letters"
table(unlist(strsplit(a,split="")))
a<-"Batman is a better superhero than Superman"
table(unlist(strsplit(a,split="")))
runif(100)
samples <- rnorm(a, mean=0, sd=1)
samples <- rnorm(runif(100), mean=0, sd=1)
hist(samples)
samples <- rnorm(runif(1000000), mean=0, sd=1)
hist(samples)
samples <- rnorm(runif(1000000), mean=0, sd=100)
samples <- rnorm(runif(1000000), mean=0, sd=100)
hist(samples)
a<-runif(100,0,100)
hist(a)
a<-runif(1000000,0,100)
hist(a)
#install.packages("devtools")
devtools::install_github("CrumpLab/vertical")
devtools::install_github
install_github
knitr::opts_chunk$set(message=FALSE,warning=FALSE, cache=TRUE)
```{r}
sum(1:100)
seq(100,200,5)
sum(seq(100,200,5))
a<- seq(100,1000,100)
seq(100,1000,100)
seq(100,1000,100)
sum(seq())
sum(seq(100,1000,100))
sum(1,3,2,4,3,5,4,3,4,5,6,5,6,7,6,5,6,5,4,3,4,5)
for(i in 1:10){
if(i <= 10){
print(i)
} else {
break
}
}
sum(for(i in 1:10){
if(i <= 10){
print(i)
} else {
break
}
})
a<- for(i in 1:10){
if(i <= 10){
print(i)
} else {
break
}
}
sum(a)
a<- c(for(i in 1:10){
if(i <= 10){
print(i)
} else {
break
}
})
sum(c)
a<- c(for(i in 1:10){
if(i <= 10){
print(i)
} else {
break
}
})
sum(a)
a<- c(for(i in 1:10){
if(i <= a){
print(i)
} else {
break
}
})
a<- c(for(i in 1:10){
if(i <= c){
print(i)
} else {
break
}
})
a<- c(for(i in 1:10){
if(i <= 0){
print(i)
} else {
break
}
})
sum(a)
a<- c(for(i in 1:10){
if(i <= 1:10){
print(i)
} else {
break
}
})
sum(i)
X1 <- 100
Xn <- 200
step <- 5
(((Xn - X1)/step) + 1) * ((X1 + Xn)/2)
X1 <- 200
Xn <- 2000
step <- 5
(((Xn - X1)/step) + 1) * ((X1 + Xn)/2)
sum(seq(100,1000,2))
seq(10,100,10)
sum(seq(10,100,10))
```{r}
seq(10,100,10)
sum(seq(10,100,10))
seq(10,100,10)
sum(seq(10,100,10))
c(1:5)
sum(c)/length(c)
c<- (1:5)
sum(1:5)/length(c)
c<- (1:5)
sum(C)/length(c)
sum("c")/length(c)
c<- (1:5)
sum("1:5")/length(c)
c<- (1:5)
sum(1:5)/length(c)
install.packages("tidyverse")
# load libraries
library(dplyr)
library(ggplot2)
# chickwts is a built in data set
# with chick weights by feed
# calculate means for each feed type
means_df <- chickwts %>%
group_by(feed) %>%
summarize(means = mean(weight))
# print table of means
knitr::kable(means_df)
# load libraries
library(dplyr)
library(ggplot2)
# chickwts is a built in data set
# with chick weights by feed
# calculate means for each feed type
means_df <- chickwts %>%
group_by(feed) %>%
summarize(means = mean(weight))
# print table of means
knitr::kable(means_df)
sample(1:9, 10)
sample(1:90, 10, replace=TRUE)
sample(1:90, 10, replace=TRUE)
min(sample)
scores<- sample(1:90, 10, replace=TRUE)
min(scores)
max(scores)
numbers_to_test <- min(scores):max(scores)
sum_deviations <-c() # create an empty vector to store sums
for(i in numbers_to_test) {
sum_deviations[i] <- sum(sample-i)
}
scores<- sample(1:90, 10, replace=TRUE)
min(scores)
max(scores)
numbers_to_test <- min(scores):max(scores)
sum_deviations <-c() # create an empty vector to store sums
for(i in numbers_to_test) {
sum_deviations[i] <- sum(scores-i)
}
sum_deviations
scores<- sample(1:100, 10, replace=TRUE)
min(scores)
max(scores)
numbers_to_test <- min(scores):max(scores)
sum_deviations <-c() # create an empty vector to store sums
for(i in numbers_to_test) {
sum_deviations[i] <- sum(scores-i)
}
sum_deviations
scores<- sample(1:10, 10, replace=TRUE)
min(scores)
max(scores)
numbers_to_test <- min(scores):max(scores)
sum_deviations <-c() # create an empty vector to store sums
for(i in numbers_to_test) {
sum_deviations[i] <- sum(scores-i)
}
sum_deviations
scores<- sample(1:56, 10, replace=TRUE)
min(scores)
max(scores)
numbers_to_test <- min(scores):max(scores)
sum_deviations <-c() # create an empty vector to store sums
for(i in numbers_to_test) {
sum_deviations[i] <- sum(scores-i)
}
sum_deviations
scores<- sample(1:23, 10, replace=TRUE)
min(scores)
max(scores)
numbers_to_test <- min(scores):max(scores)
sum_deviations <-c() # create an empty vector to store sums
for(i in numbers_to_test) {
sum_deviations[i] <- sum(scores-i)
}
sum_deviations
scores<- sample(1:10, 10, replace=TRUE)
min(scores)
max(scores)
numbers_to_test <- min(scores):max(scores)
sum_deviations <-c() # create an empty vector to store sums
for(i in numbers_to_test) {
sum_deviations[i] <- sum(scores-i)
}
sum_deviations
plot(abs(sum_deviations))
scores<- sample(1:10, 10, replace=TRUE)
min(scores)
max(scores)
numbers_to_test <- min(scores):max(scores)
sum_deviations <-c() # create an empty vector to store sums
for(i in numbers_to_test) {
sum_deviations[i] <- sum(scores-i)
}
sum_deviations
sd(scores)
plot(abs(sum_deviations))
scores<- sample(1:20, 1, replace=TRUE)
min(scores)
max(scores)
numbers_to_test <- min(scores):max(scores)
sum_deviations <-c() # create an empty vector to store sums
for(i in numbers_to_test) {
sum_deviations[i] <- sum(scores-i)
}
sum_deviations
sd(scores)
plot(abs(sum_deviations))
scores<- sample(1:20, 64, replace=TRUE)
min(scores)
max(scores)
numbers_to_test <- min(scores):max(scores)
sum_deviations <-c() # create an empty vector to store sums
for(i in numbers_to_test) {
sum_deviations[i] <- sum(scores-i)
}
sum_deviations
sd(scores)
plot(abs(sum_deviations))
